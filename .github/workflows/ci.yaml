name: CI

on:
  push:
    paths-ignore:
      - "doc/**"
      - "**.md"
  workflow_dispatch:

permissions:
  contents: read
  packages: read

run-name: ci - ${{ github.event.head_commit.message }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '#wip') }}
    strategy:
      matrix:
        version: [ 12.8.1, 12.8.2 ]
    steps:

      - name: Login to registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20  # v3.1.0
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image name
        env:
          OPENEDGE_VERSION: "${{ matrix.version }}"
          IMAGE_REF: "devbfvio/openedge-compiler"       
          EXECUTE_UNITTESTS: "true"      
        run: |
          echo "OPENEDGE_VERSION=${OPENEDGE_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_REF}:${OPENEDGE_VERSION}" >> $GITHUB_ENV
          echo "EXECUTE_UNITTESTS=${EXECUTE_UNITTESTS}" >> $GITHUB_ENV
          
      - name: Docker pull image
        run: |
          docker pull ${IMAGE_NAME}

      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          path: src/fwebh

      - name: Get flattened version  # get the flattened minor version 12.2.10 --> 122
        run: |
          mkdir license
          a=${{matrix.version}} 
          echo matrix.version: $a
          flatversion=`echo ${a%\.*} | sed "s/\.//g"`
          echo flattened minor version: $flatversion
          echo "FLATVERSION=${flatversion}" >> $GITHUB_ENV

      - name: License unpack  # get progress.cfg from secret PROGRESS_CFG_12x
        run: |
          echo fetching progress.cfg from secret PROGRESS_CFG_${{env.FLATVERSION}}
          echo "${{ secrets[format('PROGRESS_CFG_{0}', env.FLATVERSION)] }}" | base64 --decode > license/progress.cfg
          ls -l license | grep -v '^total'

      - name: Build
        run: | 
          mkdir artifacts
          ls -l ${PWD}/license/
          docker run -v ${PWD}/src:/app/src -v ${PWD}/artifacts:/app/artifacts -v ${PWD}/license/progress.cfg:/usr/dlc/progress.cfg --env ANT_HOME=/usr/dlc/ant --env EXECUTE_UNITTESTS=${EXECUTE_UNITTESTS} ${IMAGE_NAME} /app/src/fwebh/scripts/build.sh
          cp src/fwebh/results.xml ${PWD}/artifacts
          ls -l ${PWD}/artifacts 

      - name: Check unit tests
        uses: bfv/ablunit-results@f2240cbab5ae09ead8567ac91ed660943b2a2d9c  # v0.1.0
        id: unit-tests
        with:
          file: artifacts/results.xml
          fail-on-error: true
          errors-only: false
          debug: false

      - name: Copy extra files
        run: |
          cp ${PWD}/src/fwebh/src/services.json ${PWD}/artifacts
          cp ${PWD}/src/fwebh/src/entitywriter.json ${PWD}/artifacts
          cp ${PWD}/src/fwebh/src/fwebh/pas/webhandlers/ROOT.handlers ${PWD}/artifacts
          ls -l artifacts | grep -v '^total'

      - name: Add Git info
        run: |
          echo "sha=${GITHUB_SHA}" > artifacts/version.git.info
          echo "branch=${GITHUB_REF}" >> artifacts/version.git.info
          echo "buildnr=${{ github.run_number }}" >> artifacts/version.git.info
          echo "openedge=${{ env.OPENEDGE_VERSION }}" >> artifacts/version.git.info
          cat artifacts/version.git.info

      - name: Save build artifacts
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808  # v4.3.3
        with:
          name: build-artifacts-${{ matrix.version }}.${{ github.run_number }}
          path: artifacts/*
          retention-days: 5

  runtests:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '#wip') }}
    strategy:
      matrix:
        version: [ 12.8.1, 12.8.2 ]
    steps:
      - uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e  # v4.1.7
        with:
          name: build-artifacts-${{ matrix.version }}.${{ github.run_number }}
          path: .

      - name: inspect artifacts
        run: |
          ls -l ${PWD}
          
      - run: |
          a=${{matrix.version}}
          flatversion=`echo ${a%\.*} | sed "s/\.//g"`
          echo "FLATVERSION=${flatversion}" >> $GITHUB_ENV

      - name: License unpack  # get progress.cfg from secret PROGRESS_CFG_12x
        run: |
          echo "${{ secrets[format('PROGRESS_CFG_{0}', env.FLATVERSION)] }}" | base64 --decode > progress.cfg
          ls -l 

      - name: Start PAS container
        run: |
          docker run -d -p 8810:8810 -v ${PWD}/progress.cfg:/usr/dlc/progress.cfg -v ${PWD}:/app/src -v ${PWD}/fwebh.pl:/app/lib/logic.pl --env PASWEBHANDLERS=/app/src/ROOT.handlers docker.io/devbfvio/openedge-pas:${{ matrix.version }}-dev /app/pas/start.sh > container.id
          sleep 30   # unfortunately necessary to wait for the container to start
          docker ps -a

      - name: Display container logs before call
        run: |
          docker logs $(cat container.id)

      - name: Curl echo
        continue-on-error: false
        run: |
          curl http://localhost:8810/web/v1/echo --max-time 30

      - name: Test error response
        continue-on-error: false
        run: |
          STATUSCODE=$(curl --silent --output /dev/stderr --write-out "%{http_code}" http://localhost:8810/web/v1/test?error=400)
          if test $STATUSCODE -ne 400; then
            echo "expected http error 400, got: $STATUSCODE"
            exit 1
          fi

      - name: Display container logs after call
        run: |
          docker logs $(cat container.id)



